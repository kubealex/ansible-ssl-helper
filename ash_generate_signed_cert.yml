---
- name: Ansible SSL Helper | Generate signed certificate
  hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    - name: Set user inputs as facts
      ansible.builtin.set_fact:
        ash_ca_key_passphrase: "{{ ca_key_passphrase | default('', true) }}"
        ash_ca_key_path: "{{ ca_key_path | default('~/ca_cert.key', true) }}"
        ash_ca_path: "{{ ca_path | default('~/ca_cert.pem', true) }}"
        ash_cert_path: "{{ cert_path | default('~/cert.pem', true) }}"
        ash_cert_key_path: "{{ cert_key_path | default('~/cert.key', true) }}"
        ash_cert_san: "{{ cert_san }}"

    - name: Create private key for new certificate
      community.crypto.openssl_privatekey:
        path: "{{ ash_cert_key_path }}"

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ ash_cert_key_path }}"
        subject_alt_name: "{{ ash_cert_san }}"
      register: _cert_csr

    - name: Check whether certificate exists
      ansible.builtin.stat:
        path: "{{ ash_cert_path }}"
      register: _cert_exists

    - name: Read existing certificate if exists
      ansible.builtin.slurp:
        path: "{{ ash_cert_path }}"
      when: _cert_exists.stat.exists
      register: _certificate

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (_certificate.content | b64decode) if _cert_exists.stat.exists else omit }}"
        csr_content: "{{ _cert_csr.csr }}"
        provider: ownca
        ownca_path: "{{ ash_ca_path }}"
        ownca_privatekey_path: "{{ ash_ca_key_path }}"
        ownca_privatekey_passphrase: "{{ ash_ca_key_passphrase }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      register: _certificate

    - name: Write certificate file
      ansible.builtin.copy:
        dest: "{{ ash_cert_path }}"
        content: "{{ _certificate.certificate }}"
      when: _certificate is changed
